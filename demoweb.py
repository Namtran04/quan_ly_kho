import streamlit as st
import pandas as pd

# C·∫•u h√¨nh trang web
st.set_page_config(page_title="Qu·∫£n l√Ω kho", page_icon="üì¶", layout="wide")

# Danh s√°ch t√†i kho·∫£n
USER_CREDENTIALS = {"admin": "123456", "user": "password"}

# Ki·ªÉm tra ƒëƒÉng nh·∫≠p
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

# N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p -> Hi·ªÉn th·ªã giao di·ªán Login
if not st.session_state.logged_in:
    st.markdown(
        """
        <style>
            .container {
                display: flex;
            }
            .left {
                width: 40%;
                background-color: #4CAF50;
                padding: 50px;
                color: white;
                font-size: 30px;
                text-align: center;
            }
            .right {
                width: 60%;
                background-color: #1E293B;
                padding: 50px;
                color: white;
            }
            input {
                width: 100%;
                padding: 10px;
                margin: 10px 0;
            }
            button {
                width: 100%;
                padding: 10px;
                background-color: #4CAF50;
                border: none;
                color: white;
                font-size: 18px;
                cursor: pointer;
            }
        </style>
        <div class="container">
            <div class="left">
                <h1>LOGIN</h1>
            </div>
            <div class="right">
                <h2>ƒêƒÉng nh·∫≠p v√†o ph·∫ßn m·ªÅm</h2>
        """,
        unsafe_allow_html=True
    )

    username = st.text_input("üë§ T√™n ƒëƒÉng nh·∫≠p")
    password = st.text_input("üîí M·∫≠t kh·∫©u", type="password")
    login_btn = st.button("ƒêƒÉng nh·∫≠p")

    if login_btn:
        if username in USER_CREDENTIALS and USER_CREDENTIALS[username] == password:
            st.session_state.logged_in = True
            st.session_state.username = username
            st.rerun()
        else:
            st.error("‚ùå Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i!")

# N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p -> Hi·ªÉn th·ªã giao di·ªán qu·∫£n l√Ω kho h√†ng
else:
    st.sidebar.header(f"üëã Xin ch√†o, {st.session_state.username}!")
    menu = ["S·∫£n ph·∫©m", "Xu·∫•t Excel", "Nh·∫≠p Excel", "ƒêƒÉng xu·∫•t"]
    choice = st.sidebar.radio("Ch·ª©c nƒÉng", menu)

    # D·ªØ li·ªáu s·∫£n ph·∫©m
    if "products" not in st.session_state:
        st.session_state.products = pd.DataFrame(columns=["M√£ h√†ng", "T√™n h√†ng", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√°", "B·ªô x·ª≠ l√Ω", "RAM", "B·ªô nh·ªõ"])
    
    if choice == "S·∫£n ph·∫©m":
        st.title("üì¶ Danh s√°ch s·∫£n ph·∫©m trong kho")
        st.dataframe(st.session_state.products, use_container_width=True, height=300)

        with st.expander("üîç T√¨m ki·∫øm s·∫£n ph·∫©m"):
            search_query = st.text_input("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm:")
            filtered_df = st.session_state.products[st.session_state.products.astype(str).apply(lambda row: search_query.lower() in row.to_string().lower(), axis=1)]
            st.dataframe(filtered_df, use_container_width=True)
        
        with st.expander("‚ûï Th√™m s·∫£n ph·∫©m"):
            with st.form("add_form", clear_on_submit=True):
                col1, col2 = st.columns(2)
                with col1:
                    ma_hang = st.text_input("M√£ h√†ng")
                    ten_hang = st.text_input("T√™n h√†ng")
                    so_luong = st.number_input("S·ªë l∆∞·ª£ng", min_value=1)
                with col2:
                    don_gia = st.text_input("ƒê∆°n gi√°")
                    bo_xu_ly = st.text_input("B·ªô x·ª≠ l√Ω")
                    ram = st.text_input("RAM")
                    bo_nho = st.text_input("B·ªô nh·ªõ")
                submit_add = st.form_submit_button("Th√™m s·∫£n ph·∫©m")
                if submit_add:
                    new_product = {"M√£ h√†ng": ma_hang, "T√™n h√†ng": ten_hang, "S·ªë l∆∞·ª£ng": so_luong, "ƒê∆°n gi√°": don_gia, "B·ªô x·ª≠ l√Ω": bo_xu_ly, "RAM": ram, "B·ªô nh·ªõ": bo_nho}
                    st.session_state.products = pd.concat([st.session_state.products, pd.DataFrame([new_product])], ignore_index=True)
                    st.success("‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi!")
                    st.rerun()
        
        with st.expander("‚úèÔ∏è S·ª≠a s·∫£n ph·∫©m"):
            ma_hang_sua = st.text_input("Nh·∫≠p m√£ h√†ng c·∫ßn s·ª≠a")
            if ma_hang_sua:
                df = st.session_state.products
                if ma_hang_sua in df["M√£ h√†ng"].values:
                    product = df[df["M√£ h√†ng"] == ma_hang_sua].iloc[0]
                    ten_hang = st.text_input("T√™n h√†ng", value=product["T√™n h√†ng"])
                    so_luong = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, value=int(product["S·ªë l∆∞·ª£ng"]))
                    don_gia = st.text_input("ƒê∆°n gi√°", value=product["ƒê∆°n gi√°"])
                    bo_xu_ly = st.text_input("B·ªô x·ª≠ l√Ω", value=product["B·ªô x·ª≠ l√Ω"])
                    ram = st.text_input("RAM", value=product["RAM"])
                    bo_nho = st.text_input("B·ªô nh·ªõ", value=product["B·ªô nh·ªõ"])
                    if st.button("C·∫≠p nh·∫≠t"):
                        st.session_state.products.loc[df["M√£ h√†ng"] == ma_hang_sua, ["T√™n h√†ng", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√°", "B·ªô x·ª≠ l√Ω", "RAM", "B·ªô nh·ªõ"]] = [ten_hang, so_luong, don_gia, bo_xu_ly, ram, bo_nho]
                        st.success("‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!")
                        st.rerun()
                else:
                    st.error("‚ùå M√£ h√†ng kh√¥ng t·ªìn t·∫°i!")
        
        with st.expander("üóëÔ∏è X√≥a s·∫£n ph·∫©m"):
            ma_hang_xoa = st.text_input("Nh·∫≠p m√£ h√†ng mu·ªën x√≥a")
            if st.button("X√≥a"):
                df = st.session_state.products
                if ma_hang_xoa in df["M√£ h√†ng"].values:
                    st.session_state.products = df[df["M√£ h√†ng"] != ma_hang_xoa]
                    st.success(f"‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m c√≥ m√£ h√†ng: {ma_hang_xoa}")
                    st.rerun()
                else:
                    st.error("‚ùå M√£ h√†ng kh√¥ng t·ªìn t·∫°i!")
    
    elif choice == "Xu·∫•t Excel":
        st.title("üì§ Xu·∫•t danh s√°ch s·∫£n ph·∫©m")
        st.download_button(label="üì• T·∫£i file", data=st.session_state.products.to_csv(index=False).encode('utf-8'), file_name="kho_hang.csv", mime="text/csv")
    
    elif choice == "Nh·∫≠p Excel":
        st.title("üì• Nh·∫≠p d·ªØ li·ªáu t·ª´ Excel")
        uploaded_file = st.file_uploader("üìÇ Ch·ªçn file", type=["xlsx"])
        if uploaded_file:
            df_new = pd.read_excel(uploaded_file, engine='openpyxl')
            st.session_state.products = pd.concat([st.session_state.products, df_new], ignore_index=True)
            st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c nh·∫≠p!")
            st.rerun()
    
    elif choice == "ƒêƒÉng xu·∫•t":
        st.session_state.logged_in = False
        st.rerun()
